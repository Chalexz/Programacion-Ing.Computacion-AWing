'''
2do parcial de Intro a Progra hecho el 8/5/25
Alexander Wing
'''
'''                                                            1. comprimir_lista COMPLETO
e: lista de enteros
s: lista con listas
r:
'''

def comprimir_lista(lista):
    lista_final = []
    w = 0

    while w < len(lista):
        num = lista[w]
        veces = 1
        while w + 1 < len(lista) and lista[w] == lista[w + 1]:
            veces += 1
            w += 1
        lista_final.append([num, veces])
        w += 1

    return lista_final

'''                                                                2. natural
e: una lista desordenada de enteros
s: una lista con listas ordenadas de enteros en orden de menor a mayor
r:el supervisor dijo: si tiene números iguales sigue la lista
'''

def natural(lista):
    lista_final = []

    sublista = [lista[0]]
    for i in range(1, len(lista)):
        if lista[i] >= lista[i-1]:
            sublista.append(lista[i])

        else:
            lista_final.append(sublista)
            sublista = [lista[i]]
    lista_final.append(sublista)

    return lista_final

'''                                                          3. cruces_perfectas (matriz)
e: una matriz cuadrada de listas de numeros enteros
s: cantidade de cruces perfectas de 1's. Osea un entero
r:
'''
matriz_9x9 = [
[0, 0, 0, 0, 1, 0, 1, 0, 0],
[1, 0, 0, 1, 0, 1, 1, 1, 0],
[1, 0, 0, 0, 1, 0, 1, 0, 1],
[0, 0, 0, 0, 1, 0, 0, 0, 0],
[1, 1, 1, 1, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 1, 0, 0, 0, 0],
[1, 1, 1, 0, 1, 0, 1, 0, 0],
[1, 1, 1, 1, 1, 1, 1, 1, 0],
[1, 1, 1, 0, 1, 0, 1, 0, 0]
]

def cruces_perfectas(matriz):
    contador_cruces = 0
    w = len(matriz)

    for i in range(1, w-1):
        for j in range(1,w-1):
            if matriz[i][j] == 1:
                largo = 1
                while (
                    i - largo >= 0 and i + largo < w and j - largo >= 0 and j + largo < w and
                    matriz[i-largo][j] == 1 and
                    matriz[i+largo][j] == 1 and
                    matriz[i][j-largo] == 1 and
                    matriz[i][j+ largo] == 1
                ):
                    contador_cruces += 1
                    largo += 1

    return contador_cruces // 2

'''                                                            4. ceros_abajo (matriz)

e: matriz cuadrada con enteros
s: booleano: True si solo hay ceros debajo de la diagonal y False si No solo hay booleanos bajo la diagonal principal
r:
'''

#matrices de https://filebin.net/o5k65qcvvvyju1uy

matriz1 = [    ['D', 'G', 'B', 'T', 4, 15],
    [0, 'F', 5, 'R', 6, 14],    [0, 0, 8, 5, 7, 5],
    [0, 0, 0, 'G', 'R', 'F'],    [0, 0, 0, 0, 3, 4],
    [0, 0, 0, 0, 0, 1]]
matriz2 = [
    ['D', 'G', 'B', 'T', 4, 15],    [0, 'F', 5, 'R', 6, 14],
    [0, 0, 8, 5, 7, 5],    [0, 0, 0, 'G', 'R', 'F'],
    [0, 0, 0, 0, 0, 4],  # Cero en la diagonal aquí    [0, 0, 0, 0, 0, 1]
]
matriz3 = [    ['D', 'G', 'B', 'T', 4, 15],
    [0, 'F', 5, 'R', 6, 14],    [0, 0, 8, 5, 7, 5],
    [0, 0, 0, 'G', 'R', 'F'],    [5, 0, 0, 0, 3, 4],  # 5 debajo de la diagonal
    [0, 0, 0, 0, 0, 1]]
matriz4 = [
    ['D', 'G', 'B', 'T', 4, 15],    [0, 'F', 5, 'R', 6, 14],
    [0, 0, 8, 5, 7, 5],    [0, 0, 0, 'G', 'R', 'F'],
    [0, 0, 0, 0, 3, 4],    [0, 0, 0, 0, 0, 1]
]

def ceros_abajo (matriz):
    pass #no me dio tiempoooooooo

##################################################################
# EXECUTOR
##################################################################
def executor(test_number, funcion_nombre, expected_result, *args):
    print('#', test_number)

    # Buscar la función por nombre en el entorno global
    funcion = globals().get(funcion_nombre)

    if not callable(funcion):
        print(f"ERROR: 0 puntos. La función '{funcion_nombre}' no existe o no es válida.")
        return 0

    try:
        print(funcion.__name__, 'con', *args)
        result = funcion(*args)
        if result == expected_result:
            print('OK: +5 puntos.', 'resultado:', result, 'esperado:', expected_result)
            return 5
        else:
            print('ERROR: 0 puntos.', 'resultado:', result, 'esperado:', expected_result)
            return 0
    except Exception as e:
        print('ERROR: 0 puntos. SE CAE! esperado:', expected_result)
        return 0

nota_01 = 0
nota_02 = 0
nota_03 = 0
nota_04 = 0
nota_01_extra = 0
nota_02_extra = 0
nota_03_extra = 0
nota_04_extra = 0
observacion_01 = ''
observacion_02 = ''
observacion_03 = ''
observacion_04 = ''

print('* * * * Plan de pruebas Examen II * * * *')
print()
print('Ejercicio 1: comprimir_lista(num)')
l1_1 = [1,1,1,1,1,2,2,2,2,3,3,3,4,4,5]
l1_2 = [5,4,4,3,3,3,2,2,2,2,1,1,1,1,1]
l1_3 = [3,7,8,9,2,6,7,9]
l1_4 = [6,6,6,6,6,6,6,6]
l1_5 = [109,56,56,56,41,41,41,41,41,41,41,41,41,41,3,3]

nota_01 += executor(1,'comprimir_lista', [[1, 5], [2, 4], [3, 3], [4, 2], [5, 1]], l1_1)
nota_01 += executor(2,'comprimir_lista', [[5, 1], [4, 2], [3, 3], [2, 4], [1, 5]], l1_2)
nota_01 += executor(3,'comprimir_lista', [[3, 1], [7, 1], [8, 1], [9, 1], [2, 1], [6, 1], [7, 1], [9, 1]], l1_3)
nota_01 += executor(4,'comprimir_lista', [[6, 8]], l1_4)
nota_01 += executor(5,'comprimir_lista', [[109, 1], [56, 3], [41, 10], [3, 2]], l1_5)
observacion_01 = ''    #observación sobre ejercicio 1
nota_01_extra = 0      #agregar extra por esfuerzo
if observacion_01 != '':
        print (observacion_01)
if nota_01_extra != 0:
        print ('Extra por código fuente (ver observación):', nota_01_extra)
print ('Nota ejercicio 1:',nota_01 + nota_01_extra, 'de', 25)

print()
print('Ejercicio 2: natural(lista)')
l2_1 = [1,6,8,10,14,17,22,24,28,90,101]
l2_2 = [101,90,28,24,22,17,14,10,8,6,1]
l2_3 = [-20,-10,-2,15,1,2,3,4,5]
l2_4 = [-20,-10,-2,15,1,2,3,4,5,-4]
l2_5 = [10,20,30,-3]

nota_02 += executor(1,'natural', [[1, 6, 8, 10, 14, 17, 22, 24, 28, 90, 101]], l2_1)
nota_02 += executor(2,'natural', [[101], [90], [28], [24], [22], [17], [14], [10], [8], [6], [1]], l2_2)
nota_02 += executor(3,'natural', [[-20, -10, -2, 15], [1, 2, 3, 4, 5]], l2_3)
nota_02 += executor(4,'natural', [[-20, -10, -2, 15], [1, 2, 3, 4, 5],[-4]], l2_4)
nota_02 += executor(5,'natural', [[10, 20, 30], [-3]], l2_5)
observacion_02 = ''    #observación sobre ejercicio 2
nota_02_extra = 0      #agregar extra por esfuerzo
if observacion_02 != '':
        print (observacion_02)
if nota_02_extra != 0:
        print ('Extra por código fuente (ver observación):', nota_02_extra)
print ('Nota ejercicio 2:',nota_02 + nota_02_extra, 'de', 25)

print()
print('Ejercicio 3: cruces_perfectas(matriz)')

m3_1 = [
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 1, 1, 1, 1, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0]
]
m3_2 = [
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 0, 1, 0],
    [1, 1, 1, 0, 1, 0, 0, 0, 1],
    [0, 1, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 1, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 1, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0]
]

m3_3 = [
[1,0],
[1,1],
[1,0]
]

m3_4 = matriz = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]
]

m3_5 = [
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1],
    [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1]
]

nota_03 += executor(1,'cruces_perfectas', 3, m3_1)
nota_03 += executor(2,'cruces_perfectas', 1, m3_2)
nota_03 += executor(3,'cruces_perfectas', 0, m3_3)
nota_03 += executor(4,'cruces_perfectas', 16, m3_4)
nota_03 += executor(5,'cruces_perfectas', 6, m3_5)
observacion_03 = 'Se suman 5 por cercanía del código en los casos de error'    #observación sobre ejercicio 3
nota_03_extra = 5      #agregar extra por esfuerzo
if observacion_03 != '':
        print (observacion_03)
if nota_03_extra != 0:
        print ('Extra por código fuente (ver observación):', nota_03_extra)
print ('Nota ejercicio 3:',nota_03 + nota_03_extra, 'de', 25)

print()
print('Ejercicio 4: ceros_abajo (num)')
m4_1 =  [
    [6, 7, 4, 2, 9, 2, 8, 6, 4, 2],
    [0, 5, 8, 4, 9, 7, 6, 2, 8, 3],
    [0, 0, 3, 7, 4, 2, 9, 5, 6, 8],
    [0, 0, 0, 9, 6, 2, 7, 4, 5, 3],
    [0, 0, 0, 0, 8, 6, 9, 3, 7, 5],
    [0, 0, 0, 0, 0, 4, 8, 9, 6, 7],
    [0, 0, 0, 0, 0, 0, 7, 5, 4, 6],
    [0, 0, 0, 0, 0, 0, 0, 3, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 6, 4],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
]

m4_2 =  [
    [6, 7, 4, 2, 9, 2, 8, 6, 4, 2],
    [0, 5, 8, 4, 9, 7, 6, 2, 8, 3],
    [0, 0, 3, 7, 4, 2, 9, 5, 6, 8],
    [0, 0, 0, 9, 6, 2, 7, 4, 5, 3],
    [0, 0, 0, 0, 8, 6, 9, 3, 7, 5],
    [0, 0, 0, 0, 0, 0, 8, 9, 6, 7], #cero diagonal
    [0, 0, 0, 0, 0, 0, 7, 5, 4, 6],
    [0, 0, 0, 0, 0, 0, 0, 3, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 6, 4],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
]

m4_3 =  [
    [7, 4, 9, 3, 5],
    [0, 2, 6, 8, 7],
    [0, 0, 9, 3, 4],
    [0, 0, 0, 5, 2],
    [0, 0, 0, 0, 6]
]

m4_4 = [
    [7, 4, 9, 3, 5],
    [0, 2, 6, 8, 7],
    [0, 0, 9, 3, 0], #cero arriba
    [0, 0, 0, 5, 2],
    [0, 0, 0, 0, 6]
]

m4_5 = [[1]]

nota_04 += executor(1,'ceros_abajo', True, m4_1)
nota_04 += executor(2,'ceros_abajo', False, m4_2)
nota_04 += executor(3,'ceros_abajo', True, m4_3)
nota_04 += executor(4,'ceros_abajo', False, m4_4)
nota_04 += executor(5,'ceros_abajo', True, m4_5)
observacion_04 = ''    #observación sobre ejercicio 4
nota_04_extra = 0      #agregar extra por esfuerzo
if observacion_04 != '':
        print (observacion_04)
if nota_04_extra != 0:
        print ('Extra por código fuente (ver observación):', nota_04_extra)
print ('Nota ejercicio 4:',nota_04 + nota_04_extra, 'de', 25)

print ()
final = nota_01 + nota_02 + nota_03 + nota_04 + nota_01_extra + nota_02_extra + nota_03_extra + nota_04_extra
print ('***************')
print ('*  ',final, '    *')
print ('***************')